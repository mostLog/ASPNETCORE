// <auto-generated />
using L.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace L.EntityFramework.Migrations
{
    [DbContext(typeof(LDbContext))]
    [Migration("20171010091040_201710101710")]
    partial class _201710101710
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("L.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatePerson");

                    b.Property<bool>("IsCrawlerContent");

                    b.Property<int?>("NovelId");

                    b.Property<DateTime?>("OperaterDateTime");

                    b.Property<string>("OperaterPerson")
                        .HasMaxLength(10);

                    b.Property<long>("Seq");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.ToTable("T_Article");
                });

            modelBuilder.Entity("L.Domain.Entities.CrawlerRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatePerson");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("OperaterDateTime");

                    b.Property<string>("OperaterPerson");

                    b.Property<string>("RuleContent");

                    b.Property<int>("RuleType");

                    b.Property<int?>("SpiderTaskId");

                    b.HasKey("Id");

                    b.HasIndex("SpiderTaskId");

                    b.ToTable("T_CrawlerRule");
                });

            modelBuilder.Entity("L.Domain.Entities.CrawlerRuleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColumnName");

                    b.Property<string>("ColumnRule");

                    b.Property<int?>("CrawlerRuleId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatePerson");

                    b.Property<DateTime?>("OperaterDateTime");

                    b.Property<string>("OperaterPerson");

                    b.Property<string>("TableName");

                    b.HasKey("Id");

                    b.HasIndex("CrawlerRuleId");

                    b.ToTable("T_CrawlerRuleDetail");
                });

            modelBuilder.Entity("L.Domain.Entities.ImageInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatePerson")
                        .HasMaxLength(10);

                    b.Property<int>("Height");

                    b.Property<int?>("ImgId");

                    b.Property<string>("Name")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("OperaterDateTime");

                    b.Property<string>("OperaterPerson")
                        .HasMaxLength(10);

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(300);

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("ImgId");

                    b.ToTable("T_ImageInfo");
                });

            modelBuilder.Entity("L.Domain.Entities.Img", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatePerson")
                        .HasMaxLength(10);

                    b.Property<string>("Introduce")
                        .HasMaxLength(500);

                    b.Property<bool>("IsCrawlerImgInfo");

                    b.Property<DateTime?>("OperaterDateTime");

                    b.Property<string>("OperaterPerson")
                        .HasMaxLength(10);

                    b.Property<int>("PageEndIndex");

                    b.Property<int>("PageStartIndex");

                    b.Property<string>("Url")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("T_Img");
                });

            modelBuilder.Entity("L.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionName");

                    b.Property<string>("ClassName");

                    b.Property<string>("DateTime");

                    b.Property<long?>("Duration");

                    b.Property<int>("LogLevel");

                    b.Property<string>("Msg");

                    b.HasKey("Id");

                    b.ToTable("T_Log");
                });

            modelBuilder.Entity("L.Domain.Entities.Notice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatePerson");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool?>("IsTop");

                    b.Property<DateTime?>("OperaterDateTime");

                    b.Property<string>("OperaterPerson");

                    b.Property<DateTime?>("StartDate");

                    b.Property<bool?>("Type");

                    b.HasKey("Id");

                    b.ToTable("T_Notice");
                });

            modelBuilder.Entity("L.Domain.Entities.Novel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatePerson");

                    b.Property<bool>("IsCrawlerArticle");

                    b.Property<bool>("IsOpenEmail");

                    b.Property<bool>("IsRecurrent");

                    b.Property<DateTime>("LastUpdateTime");

                    b.Property<string>("Name");

                    b.Property<int?>("NovelTypeId");

                    b.Property<DateTime?>("OperaterDateTime");

                    b.Property<string>("OperaterPerson");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("NovelTypeId");

                    b.ToTable("T_Novel");
                });

            modelBuilder.Entity("L.Domain.Entities.NovelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatePerson");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("OperaterDateTime");

                    b.Property<string>("OperaterPerson");

                    b.HasKey("Id");

                    b.ToTable("NovelType");
                });

            modelBuilder.Entity("L.Domain.Entities.Proxy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IP")
                        .HasMaxLength(20);

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastVerifyDateTime");

                    b.Property<string>("Location")
                        .HasMaxLength(50);

                    b.Property<int>("Port");

                    b.Property<long>("ResponseSpeed");

                    b.Property<string>("Type")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.ToTable("T_Proxy");
                });

            modelBuilder.Entity("L.Domain.Entities.PushText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsWriteDb");

                    b.Property<DateTime?>("PushDateTime");

                    b.Property<string>("Text");

                    b.Property<string>("TextType")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("T_PushText");
                });

            modelBuilder.Entity("L.Domain.Entities.SpiderTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcquisitionInterval");

                    b.Property<int?>("CrawlerRuleId");

                    b.Property<int>("CrawlerType");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatePerson");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRecurrent");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("OperaterDateTime");

                    b.Property<string>("OperaterPerson");

                    b.Property<string>("RecurrentCron");

                    b.Property<DateTime?>("RecurrentDateTime");

                    b.Property<string>("SpiderId");

                    b.Property<string>("Urls");

                    b.HasKey("Id");

                    b.HasIndex("CrawlerRuleId");

                    b.ToTable("T_SpiderTask");
                });

            modelBuilder.Entity("L.Domain.Entities.Article", b =>
                {
                    b.HasOne("L.Domain.Entities.Novel", "Novel")
                        .WithMany("Articles")
                        .HasForeignKey("NovelId");
                });

            modelBuilder.Entity("L.Domain.Entities.CrawlerRule", b =>
                {
                    b.HasOne("L.Domain.Entities.SpiderTask")
                        .WithMany("Rules")
                        .HasForeignKey("SpiderTaskId");
                });

            modelBuilder.Entity("L.Domain.Entities.CrawlerRuleDetail", b =>
                {
                    b.HasOne("L.Domain.Entities.CrawlerRule", "CrawlerRule")
                        .WithMany()
                        .HasForeignKey("CrawlerRuleId");
                });

            modelBuilder.Entity("L.Domain.Entities.ImageInfo", b =>
                {
                    b.HasOne("L.Domain.Entities.Img", "Img")
                        .WithMany("ImageInfos")
                        .HasForeignKey("ImgId");
                });

            modelBuilder.Entity("L.Domain.Entities.Novel", b =>
                {
                    b.HasOne("L.Domain.Entities.NovelType", "NovelType")
                        .WithMany("Novels")
                        .HasForeignKey("NovelTypeId");
                });

            modelBuilder.Entity("L.Domain.Entities.SpiderTask", b =>
                {
                    b.HasOne("L.Domain.Entities.CrawlerRule")
                        .WithMany("Tasks")
                        .HasForeignKey("CrawlerRuleId");
                });
#pragma warning restore 612, 618
        }
    }
}
